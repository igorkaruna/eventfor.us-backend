name: Continuous Integration

on:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    environment:
      name: eventfor.us-backend

    env:
      PYTHONPATH: ${{ vars.PYTHONPATH }}
      PYTHONUNBUFFERED: ${{ vars.PYTHONUNBUFFERED }}

      # General Settings
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      INTERNAL_IPS: ${{ secrets.INTERNAL_IPS }}
      DEBUG: ${{ vars.DEBUG }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      PAGE_SIZE: ${{ vars.PAGE_SIZE }}

      # Postgres settings
      POSTGRES_ENGINE: ${{ vars.POSTGRES_ENGINE }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      # Redis settings
      REDIS_BACKEND: ${{ vars.REDIS_BACKEND }}
      REDIS_LOCATION: ${{ vars.REDIS_LOCATION }}
      REDIS_CLIENT_CLASS: ${{ vars.REDIS_CLIENT_CLASS }}
      REDIS_TIMEOUT: ${{ vars.REDIS_TIMEOUT }}

      # Security Settings
      SECURE_SSL_REDIRECT: ${{ vars.SECURE_SSL_REDIRECT }}
      SECURE_HSTS_SECONDS: ${{ vars.SECURE_HSTS_SECONDS }}
      SECURE_HSTS_PRELOAD: ${{ vars.SECURE_HSTS_PRELOAD }}
      SECURE_HSTS_INCLUDE_SUBDOMAINS: ${{ vars.SECURE_HSTS_INCLUDE_SUBDOMAINS }}
      SECURE_CONTENT_TYPE_NOSNIFF: ${{ vars.SECURE_CONTENT_TYPE_NOSNIFF }}
      SECURE_SESSION_COOKIE: ${{ vars.SECURE_SESSION_COOKIE }}
      SECURE_CSRF_COOKIE: ${{ vars.SECURE_CSRF_COOKIE }}
      SECURE_REFERRER_POLICY: ${{ vars.SECURE_REFERRER_POLICY }}

      # JWT settings
      JWT_ACCESS_TOKEN_LIFETIME_DAYS: ${{ vars.JWT_ACCESS_TOKEN_LIFETIME_DAYS }}
      JWT_REFRESH_TOKEN_LIFETIME_DAYS: ${{ vars.JWT_REFRESH_TOKEN_LIFETIME_DAYS }}
  
      # Logger settings
      LOGGER_CONSOLE_LEVEL: ${{ vars.LOGGER_CONSOLE_LEVEL }}
      LOGGER_FILE_LEVEL: ${{ vars.LOGGER_FILE_LEVEL }}

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Cache Poetry virtualenv
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install and configure Poetry
      run: |
        pip install poetry
        poetry config virtualenvs.create false

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Run linter
      run: |
        flake8 src --config src/.flake8
        python src/manage.py check

    - name: Apply migrations
      run: python src/manage.py migrate

    - name: Run tests
      run: pytest src --cache-clear -p no:warnings -x
